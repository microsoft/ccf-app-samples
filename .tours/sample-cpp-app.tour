{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Sample C++ App Tour",
  "steps": [
    {
      "file": "cpp/app/app.cpp",
      "description": "This file defines a sample CCF C++ application. \n\nThe sample application is simple and does not make use of all CCF features (e.g. historical queries). However, it is a great starting point for new CCF developers.",
      "line": 1
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "Here, the application is instantiated. \n\nThis lets CCF know that the application handlers should be registered and available on each CCF node starting this application. ",
      "line": 120,
      "selection": {
        "start": {
          "line": 118,
          "character": 1
        },
        "end": {
          "line": 125,
          "character": 22
        }
      }
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "The application logic is defined in this namespace.\n\nIn particular, it defines:\n1. The types used by the app to record its state in the key-value store.\n2. The API schema for each endpoint.\n3. The HTTP endpoints that contain the business logic of the application and that can be invoked by client requests.",
      "line": 12
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "The application makes use of a single key-value store map, which maps a `size_t` key to a `std::string` value (e.g. 0 -> \"hello world\").\n\nAll `put` operations on this map are recorded in the CCF ledger. ",
      "line": 15
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "This defines the name of the `kv::Map` declared above. \n\nNote that the name is *not* prefixed with `public:` so all data written to this map is encrypted in the ledger. If the table was prefixed with `public:`, all writes to the map would be recorded in clear in the ledger, which is useful for auditable public data.",
      "line": 16
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "CCF applications automatically generate their own OpenAPI specification (accessible via `GET /app/api`).\n\nThese lines specify metadata for the entire application.",
      "line": 37,
      "selection": {
        "start": {
          "line": 37,
          "character": 1
        },
        "end": {
          "line": 41,
          "character": 47
        }
      }
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "This is the first HTTP handler defined by the application.\n\nIt lets users record an arbitrary message in the \"records\" private key-value map. The unique key of the message is set by the user as the `id` query parameter. \n\nEach handler is given a single transaction object (`ctx.tx`) that needs to be used to mutate and read from the key-value store.",
      "line": 43
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "This is the CCF key-value store API to write to a specific map. \n\nA \"handle\" should be first retrieved on the map, using the `rw<Map>(RECORDS)` method on the unique transaction object `ctx.tx`. Then, a value (`in.msg`) can be recorded at a specific key (`id`) using the `put(key, value)` call. \n\nSee https://microsoft.github.io/CCF/release/2.x/build_apps/kv/index.html for the full key-value store API.",
      "line": 66,
      "selection": {
        "start": {
          "line": 66,
          "character": 9
        },
        "end": {
          "line": 69,
          "character": 41
        }
      }
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "This installs the `write` handler as an HTTP endpoint.\n\nIt specifies:\n- The URI of the HTTP endpoint. In this case, `POST /app/log`. Note that all CCF application endpoints are prefixed with `/app`.\n- The content type of the HTTP request and response, in this case JSON.\n- The user authentication scheme. In this case, unauthenticated users are allowed to invoke the endpoint. See https://microsoft.github.io/CCF/release/2.x/build_apps/auth/index.html for the list of all supported authentication schemes.\n- The API schema to use in the generated OpenAPI specification.\n- The `id` query parameter at which the user message will be recorded. ",
      "line": 71,
      "selection": {
        "start": {
          "line": 71,
          "character": 7
        },
        "end": {
          "line": 75,
          "character": 20
        }
      }
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "This is the second handler for this sample application.\n\nIt is similar to the first handler except that it only reads from the key-value store.",
      "line": 77
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "Note that `make_read_only_endpoint` is used to specify that the endpoint does not write to the key-value store. \n\nThe endpoint is accessible at `GET /app/log` and as such, does not accept any request body.\n\n",
      "line": 103,
      "selection": {
        "start": {
          "line": 103,
          "character": 7
        },
        "end": {
          "line": 110,
          "character": 20
        }
      }
    },
    {
      "file": "cpp/app/app.cpp",
      "description": "That's it! \n\nFor more information on how to build CCF C++ applications, see https://microsoft.github.io/CCF/release/2.x/build_apps/example.html. \n\nFor any questions or bugs, please open an issue on Github: https://github.com/microsoft/CCF/issues/new/choose.",
      "line": 122
    },
    {
      "file": "README.md",
      "description": "You can build the sample application by running the following steps.\n\nMake sure the dependencies have been installed, or that you have checked out this repository in a VSCode development container (see above).",
      "line": 59
    },
    {
      "file": "README.md",
      "description": "Finally, you can run the application locally using the CCF sandbox script.\n\nYou can then interact with the application with `curl`.",
      "line": 75
    }
  ],
  "ref": "main"
}